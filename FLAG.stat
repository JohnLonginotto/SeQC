class stat:
    def __init__(self,INFO):
        self.DESCRIPTION =                     ['Read flags in AC.GT notation (http://ac.gt/flags)', 'ABcdEfGHijKl']
        self.LINKABLE    = True
        self.SQL         = 'TEXT'
        self.before      = '''
intToFlag,strToFlag = {},{}
for x in xrange(0,4096):
    binary = format(x, '12b') # Turn int into string of the binary
    output  = 'A' if binary[11] == '1' else 'a'
    output += 'B' if binary[10] == '1' else 'b'
    output += 'C' if binary[9]  == '1' else 'c'
    output += 'D' if binary[8]  == '1' else 'd'
    output += 'E' if binary[7]  == '1' else 'e'
    output += 'F' if binary[6]  == '1' else 'f'
    output += 'G' if binary[5]  == '1' else 'g'
    output += 'H' if binary[4]  == '1' else 'h'
    output += 'I' if binary[3]  == '1' else 'i'
    output += 'J' if binary[2]  == '1' else 'j'
    output += 'K' if binary[1]  == '1' else 'k'
    output += 'L' if binary[0]  == '1' else 'l'
    #print binary,output
    intToFlag[    x ] = output # Read flag number goes in, AC.GT flag notation comes out.
    strToFlag[str(x)] = output # Better to coerce these 4096 ints now, than do it for every read in a SAM file.
'''
        if   INFO['fileReader'] == 'sam':       self.METHOD = 'FLAG = strToFlag[read[1]]'
        elif INFO['fileReader'] == 'pysam':     self.METHOD = 'FLAG = intToFlag[read.flag]'
        elif INFO['fileReader'] == 'htspython': self.METHOD = 'FLAG = intToFlag[read.flag]'
        else:                                   self.METHOD =  None
addStat('FLAG',[])