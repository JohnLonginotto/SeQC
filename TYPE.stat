class stat:
    def __init__(self,INFO):
        self.DESCRIPTION        =  ['Read Mapping Type (http://ac.gt/type)','20']
        self.LINKABLE           =  True
        self.SQL                =  'INT'
        self.dependencies       = ['FLAG','FIG']
        self.METHOD             = \
'''
if   FIG == 'read': TYPE = readFirst[FLAG]
elif FIG == 'mate': TYPE = mateFirst[FLAG]
else:               TYPE = noneFirst[FLAG]
'''
        self.before             = \
'''
readFirst,mateFirst,noneFirst = {},{},{}
for x in xrange(0,4096):
    output = intToFlag[x]
    if not any(letter in ['a', 'C', 'D'] for letter in output):
        if   'eF' in output: readFirst[output] = 5  ; mateFirst[output] = 11
        elif 'Ef' in output: readFirst[output] = 9  ; mateFirst[output] = 7
        elif 'ef' in output: readFirst[output] = 13 ; mateFirst[output] = 15
        elif 'EF' in output: readFirst[output] = 17 ; mateFirst[output] = 19
    ## All other reads, as well as some of those above, fall into the noneFirst dictionary.
    ## For single-end seq:
    if 'a' in output:
        if 'C' in output: noneFirst[output] = 1
        else:
            if 'e' in output: noneFirst[output] = 3
            else: noneFirst[output] = 4
    ## For paired-end seq:
    elif 'CD' in output:
        # Read & mate unmapped. Must be Type 2.
        noneFirst[output] = 2
    elif 'C' in output:
        # Must be 'Cd', so just read unmapped. According to SAM spec. no assumptions can be made about B,E,I,L (or F in previous template, but previous template should also have D so dont stress about going back through the file to find it...)
        if 'f' in output: noneFirst[output] = 8
        elif 'F' in output: noneFirst[output] = 12
    elif 'D' in output:
        # Must be 'cD', so just mate unmapped. Cannot use F flag.
        if 'e' in output: noneFirst[output] = 6
        elif 'E' in output: noneFirst[output] = 10
    else:
        ## Must be 'cd', so both reads map - but although we caught these reads in our readFirst/mateFirst dictionaries, this can also happen when noneFirst (different chromosomes):
        if 'ef' in output: noneFirst[output] = 14
        elif 'EF' in output: noneFirst[output] = 16
        elif 'Ef' in output: noneFirst[output] = 18
        elif 'eF' in output: noneFirst[output] = 20
'''
addStat('TYPE',[])